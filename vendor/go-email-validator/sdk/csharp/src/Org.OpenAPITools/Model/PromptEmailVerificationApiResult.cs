/* 
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PromptEmailVerificationApiResult
    /// </summary>
    [DataContract]
    public partial class PromptEmailVerificationApiResult :  IEquatable<PromptEmailVerificationApiResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromptEmailVerificationApiResult" /> class.
        /// </summary>
        /// <param name="canConnectSmtp">canConnectSmtp.</param>
        /// <param name="email">email.</param>
        /// <param name="isCatchAll">isCatchAll.</param>
        /// <param name="isDeliverable">isDeliverable.</param>
        /// <param name="isDisabled">isDisabled.</param>
        /// <param name="isDisposable">isDisposable.</param>
        /// <param name="isInboxFull">isInboxFull.</param>
        /// <param name="isRoleAccount">isRoleAccount.</param>
        /// <param name="mxRecords">mxRecords.</param>
        /// <param name="syntaxValid">syntaxValid.</param>
        /// <param name="message">message.</param>
        public PromptEmailVerificationApiResult(bool canConnectSmtp = default(bool), string email = default(string), bool isCatchAll = default(bool), bool isDeliverable = default(bool), bool isDisabled = default(bool), bool isDisposable = default(bool), bool isInboxFull = default(bool), bool isRoleAccount = default(bool), PromptEmailVerificationApiMX mxRecords = default(PromptEmailVerificationApiMX), bool syntaxValid = default(bool), string message = default(string))
        {
            this.CanConnectSmtp = canConnectSmtp;
            this.Email = email;
            this.IsCatchAll = isCatchAll;
            this.IsDeliverable = isDeliverable;
            this.IsDisabled = isDisabled;
            this.IsDisposable = isDisposable;
            this.IsInboxFull = isInboxFull;
            this.IsRoleAccount = isRoleAccount;
            this.MxRecords = mxRecords;
            this.SyntaxValid = syntaxValid;
            this.Message = message;
        }
        
        /// <summary>
        /// Gets or Sets CanConnectSmtp
        /// </summary>
        [DataMember(Name="can_connect_smtp", EmitDefaultValue=false)]
        public bool CanConnectSmtp { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets IsCatchAll
        /// </summary>
        [DataMember(Name="is_catch_all", EmitDefaultValue=false)]
        public bool IsCatchAll { get; set; }

        /// <summary>
        /// Gets or Sets IsDeliverable
        /// </summary>
        [DataMember(Name="is_deliverable", EmitDefaultValue=false)]
        public bool IsDeliverable { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="is_disabled", EmitDefaultValue=false)]
        public bool IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets IsDisposable
        /// </summary>
        [DataMember(Name="is_disposable", EmitDefaultValue=false)]
        public bool IsDisposable { get; set; }

        /// <summary>
        /// Gets or Sets IsInboxFull
        /// </summary>
        [DataMember(Name="is_inbox_full", EmitDefaultValue=false)]
        public bool IsInboxFull { get; set; }

        /// <summary>
        /// Gets or Sets IsRoleAccount
        /// </summary>
        [DataMember(Name="is_role_account", EmitDefaultValue=false)]
        public bool IsRoleAccount { get; set; }

        /// <summary>
        /// Gets or Sets MxRecords
        /// </summary>
        [DataMember(Name="mx_records", EmitDefaultValue=false)]
        public PromptEmailVerificationApiMX MxRecords { get; set; }

        /// <summary>
        /// Gets or Sets SyntaxValid
        /// </summary>
        [DataMember(Name="syntax_valid", EmitDefaultValue=false)]
        public bool SyntaxValid { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromptEmailVerificationApiResult {\n");
            sb.Append("  CanConnectSmtp: ").Append(CanConnectSmtp).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsCatchAll: ").Append(IsCatchAll).Append("\n");
            sb.Append("  IsDeliverable: ").Append(IsDeliverable).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  IsDisposable: ").Append(IsDisposable).Append("\n");
            sb.Append("  IsInboxFull: ").Append(IsInboxFull).Append("\n");
            sb.Append("  IsRoleAccount: ").Append(IsRoleAccount).Append("\n");
            sb.Append("  MxRecords: ").Append(MxRecords).Append("\n");
            sb.Append("  SyntaxValid: ").Append(SyntaxValid).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromptEmailVerificationApiResult);
        }

        /// <summary>
        /// Returns true if PromptEmailVerificationApiResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PromptEmailVerificationApiResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromptEmailVerificationApiResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanConnectSmtp == input.CanConnectSmtp ||
                    (this.CanConnectSmtp != null &&
                    this.CanConnectSmtp.Equals(input.CanConnectSmtp))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsCatchAll == input.IsCatchAll ||
                    (this.IsCatchAll != null &&
                    this.IsCatchAll.Equals(input.IsCatchAll))
                ) && 
                (
                    this.IsDeliverable == input.IsDeliverable ||
                    (this.IsDeliverable != null &&
                    this.IsDeliverable.Equals(input.IsDeliverable))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.IsDisposable == input.IsDisposable ||
                    (this.IsDisposable != null &&
                    this.IsDisposable.Equals(input.IsDisposable))
                ) && 
                (
                    this.IsInboxFull == input.IsInboxFull ||
                    (this.IsInboxFull != null &&
                    this.IsInboxFull.Equals(input.IsInboxFull))
                ) && 
                (
                    this.IsRoleAccount == input.IsRoleAccount ||
                    (this.IsRoleAccount != null &&
                    this.IsRoleAccount.Equals(input.IsRoleAccount))
                ) && 
                (
                    this.MxRecords == input.MxRecords ||
                    (this.MxRecords != null &&
                    this.MxRecords.Equals(input.MxRecords))
                ) && 
                (
                    this.SyntaxValid == input.SyntaxValid ||
                    (this.SyntaxValid != null &&
                    this.SyntaxValid.Equals(input.SyntaxValid))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanConnectSmtp != null)
                    hashCode = hashCode * 59 + this.CanConnectSmtp.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IsCatchAll != null)
                    hashCode = hashCode * 59 + this.IsCatchAll.GetHashCode();
                if (this.IsDeliverable != null)
                    hashCode = hashCode * 59 + this.IsDeliverable.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.IsDisposable != null)
                    hashCode = hashCode * 59 + this.IsDisposable.GetHashCode();
                if (this.IsInboxFull != null)
                    hashCode = hashCode * 59 + this.IsInboxFull.GetHashCode();
                if (this.IsRoleAccount != null)
                    hashCode = hashCode * 59 + this.IsRoleAccount.GetHashCode();
                if (this.MxRecords != null)
                    hashCode = hashCode * 59 + this.MxRecords.GetHashCode();
                if (this.SyntaxValid != null)
                    hashCode = hashCode * 59 + this.SyntaxValid.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

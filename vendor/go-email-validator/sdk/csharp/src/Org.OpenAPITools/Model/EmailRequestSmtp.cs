/* 
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EmailRequestSmtp
    /// </summary>
    [DataContract]
    public partial class EmailRequestSmtp :  IEquatable<EmailRequestSmtp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailRequestSmtp" /> class.
        /// </summary>
        /// <param name="emailFrom">emailFrom (default to &quot;user@example.org&quot;).</param>
        /// <param name="helloName">helloName (default to &quot;localhost&quot;).</param>
        /// <param name="proxy">Versions - SOCKS4, SOCKS4A and SOCKS5. Format -  schema://username:password@host:port. .</param>
        /// <param name="timeoutConnection">timeout creating smtp connection (default to 5.0M).</param>
        /// <param name="timeoutResponse">timeout of communication with smtp server.</param>
        /// <param name="port">smtp port remote server (default to 25).</param>
        public EmailRequestSmtp(string emailFrom = "user@example.org", string helloName = "localhost", string proxy = default(string), decimal timeoutConnection = 5.0M, decimal timeoutResponse = default(decimal), int port = 25)
        {
            // use default value if no "emailFrom" provided
            if (emailFrom == null)
            {
                this.EmailFrom = "user@example.org";
            }
            else
            {
                this.EmailFrom = emailFrom;
            }
            // use default value if no "helloName" provided
            if (helloName == null)
            {
                this.HelloName = "localhost";
            }
            else
            {
                this.HelloName = helloName;
            }
            this.Proxy = proxy;
            // use default value if no "timeoutConnection" provided
            if (timeoutConnection == null)
            {
                this.TimeoutConnection = 5.0M;
            }
            else
            {
                this.TimeoutConnection = timeoutConnection;
            }
            this.TimeoutResponse = timeoutResponse;
            // use default value if no "port" provided
            if (port == null)
            {
                this.Port = 25;
            }
            else
            {
                this.Port = port;
            }
        }
        
        /// <summary>
        /// Gets or Sets EmailFrom
        /// </summary>
        [DataMember(Name="email_from", EmitDefaultValue=false)]
        public string EmailFrom { get; set; }

        /// <summary>
        /// Gets or Sets HelloName
        /// </summary>
        [DataMember(Name="hello_name", EmitDefaultValue=false)]
        public string HelloName { get; set; }

        /// <summary>
        /// Versions - SOCKS4, SOCKS4A and SOCKS5. Format -  schema://username:password@host:port. 
        /// </summary>
        /// <value>Versions - SOCKS4, SOCKS4A and SOCKS5. Format -  schema://username:password@host:port. </value>
        [DataMember(Name="proxy", EmitDefaultValue=false)]
        public string Proxy { get; set; }

        /// <summary>
        /// timeout creating smtp connection
        /// </summary>
        /// <value>timeout creating smtp connection</value>
        [DataMember(Name="timeout_connection", EmitDefaultValue=false)]
        public decimal TimeoutConnection { get; set; }

        /// <summary>
        /// timeout of communication with smtp server
        /// </summary>
        /// <value>timeout of communication with smtp server</value>
        [DataMember(Name="timeout_response", EmitDefaultValue=false)]
        public decimal TimeoutResponse { get; set; }

        /// <summary>
        /// smtp port remote server
        /// </summary>
        /// <value>smtp port remote server</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int Port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailRequestSmtp {\n");
            sb.Append("  EmailFrom: ").Append(EmailFrom).Append("\n");
            sb.Append("  HelloName: ").Append(HelloName).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  TimeoutConnection: ").Append(TimeoutConnection).Append("\n");
            sb.Append("  TimeoutResponse: ").Append(TimeoutResponse).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailRequestSmtp);
        }

        /// <summary>
        /// Returns true if EmailRequestSmtp instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailRequestSmtp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailRequestSmtp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailFrom == input.EmailFrom ||
                    (this.EmailFrom != null &&
                    this.EmailFrom.Equals(input.EmailFrom))
                ) && 
                (
                    this.HelloName == input.HelloName ||
                    (this.HelloName != null &&
                    this.HelloName.Equals(input.HelloName))
                ) && 
                (
                    this.Proxy == input.Proxy ||
                    (this.Proxy != null &&
                    this.Proxy.Equals(input.Proxy))
                ) && 
                (
                    this.TimeoutConnection == input.TimeoutConnection ||
                    (this.TimeoutConnection != null &&
                    this.TimeoutConnection.Equals(input.TimeoutConnection))
                ) && 
                (
                    this.TimeoutResponse == input.TimeoutResponse ||
                    (this.TimeoutResponse != null &&
                    this.TimeoutResponse.Equals(input.TimeoutResponse))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailFrom != null)
                    hashCode = hashCode * 59 + this.EmailFrom.GetHashCode();
                if (this.HelloName != null)
                    hashCode = hashCode * 59 + this.HelloName.GetHashCode();
                if (this.Proxy != null)
                    hashCode = hashCode * 59 + this.Proxy.GetHashCode();
                if (this.TimeoutConnection != null)
                    hashCode = hashCode * 59 + this.TimeoutConnection.GetHashCode();
                if (this.TimeoutResponse != null)
                    hashCode = hashCode * 59 + this.TimeoutResponse.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

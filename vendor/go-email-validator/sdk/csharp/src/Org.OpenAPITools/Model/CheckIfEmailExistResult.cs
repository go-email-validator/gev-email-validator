/* 
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CheckIfEmailExistResult
    /// </summary>
    [DataContract]
    public partial class CheckIfEmailExistResult :  IEquatable<CheckIfEmailExistResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckIfEmailExistResult" /> class.
        /// </summary>
        /// <param name="input">input.</param>
        /// <param name="isReachable">isReachable.</param>
        /// <param name="misc">misc.</param>
        /// <param name="mx">mx.</param>
        /// <param name="smtp">smtp.</param>
        /// <param name="syntax">syntax.</param>
        /// <param name="error">error.</param>
        public CheckIfEmailExistResult(string input = default(string), string isReachable = default(string), CheckIfEmailExistMisc misc = default(CheckIfEmailExistMisc), CheckIfEmailExistMX mx = default(CheckIfEmailExistMX), CheckIfEmailExistSMTP smtp = default(CheckIfEmailExistSMTP), CheckIfEmailExistSyntax syntax = default(CheckIfEmailExistSyntax), string error = default(string))
        {
            this.Input = input;
            this.IsReachable = isReachable;
            this.Misc = misc;
            this.Mx = mx;
            this.Smtp = smtp;
            this.Syntax = syntax;
            this.Error = error;
        }
        
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// Gets or Sets IsReachable
        /// </summary>
        [DataMember(Name="is_reachable", EmitDefaultValue=false)]
        public string IsReachable { get; set; }

        /// <summary>
        /// Gets or Sets Misc
        /// </summary>
        [DataMember(Name="misc", EmitDefaultValue=false)]
        public CheckIfEmailExistMisc Misc { get; set; }

        /// <summary>
        /// Gets or Sets Mx
        /// </summary>
        [DataMember(Name="mx", EmitDefaultValue=false)]
        public CheckIfEmailExistMX Mx { get; set; }

        /// <summary>
        /// Gets or Sets Smtp
        /// </summary>
        [DataMember(Name="smtp", EmitDefaultValue=false)]
        public CheckIfEmailExistSMTP Smtp { get; set; }

        /// <summary>
        /// Gets or Sets Syntax
        /// </summary>
        [DataMember(Name="syntax", EmitDefaultValue=false)]
        public CheckIfEmailExistSyntax Syntax { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckIfEmailExistResult {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  IsReachable: ").Append(IsReachable).Append("\n");
            sb.Append("  Misc: ").Append(Misc).Append("\n");
            sb.Append("  Mx: ").Append(Mx).Append("\n");
            sb.Append("  Smtp: ").Append(Smtp).Append("\n");
            sb.Append("  Syntax: ").Append(Syntax).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckIfEmailExistResult);
        }

        /// <summary>
        /// Returns true if CheckIfEmailExistResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckIfEmailExistResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckIfEmailExistResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.IsReachable == input.IsReachable ||
                    (this.IsReachable != null &&
                    this.IsReachable.Equals(input.IsReachable))
                ) && 
                (
                    this.Misc == input.Misc ||
                    (this.Misc != null &&
                    this.Misc.Equals(input.Misc))
                ) && 
                (
                    this.Mx == input.Mx ||
                    (this.Mx != null &&
                    this.Mx.Equals(input.Mx))
                ) && 
                (
                    this.Smtp == input.Smtp ||
                    (this.Smtp != null &&
                    this.Smtp.Equals(input.Smtp))
                ) && 
                (
                    this.Syntax == input.Syntax ||
                    (this.Syntax != null &&
                    this.Syntax.Equals(input.Syntax))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.IsReachable != null)
                    hashCode = hashCode * 59 + this.IsReachable.GetHashCode();
                if (this.Misc != null)
                    hashCode = hashCode * 59 + this.Misc.GetHashCode();
                if (this.Mx != null)
                    hashCode = hashCode * 59 + this.Mx.GetHashCode();
                if (this.Smtp != null)
                    hashCode = hashCode * 59 + this.Smtp.GetHashCode();
                if (this.Syntax != null)
                    hashCode = hashCode * 59 + this.Syntax.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

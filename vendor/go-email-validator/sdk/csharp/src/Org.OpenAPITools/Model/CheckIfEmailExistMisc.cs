/* 
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CheckIfEmailExistMisc
    /// </summary>
    [DataContract]
    public partial class CheckIfEmailExistMisc :  IEquatable<CheckIfEmailExistMisc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckIfEmailExistMisc" /> class.
        /// </summary>
        /// <param name="isDisposable">isDisposable.</param>
        /// <param name="isRoleAccount">isRoleAccount.</param>
        public CheckIfEmailExistMisc(bool isDisposable = default(bool), bool isRoleAccount = default(bool))
        {
            this.IsDisposable = isDisposable;
            this.IsRoleAccount = isRoleAccount;
        }
        
        /// <summary>
        /// Gets or Sets IsDisposable
        /// </summary>
        [DataMember(Name="is_disposable", EmitDefaultValue=false)]
        public bool IsDisposable { get; set; }

        /// <summary>
        /// Gets or Sets IsRoleAccount
        /// </summary>
        [DataMember(Name="is_role_account", EmitDefaultValue=false)]
        public bool IsRoleAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckIfEmailExistMisc {\n");
            sb.Append("  IsDisposable: ").Append(IsDisposable).Append("\n");
            sb.Append("  IsRoleAccount: ").Append(IsRoleAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckIfEmailExistMisc);
        }

        /// <summary>
        /// Returns true if CheckIfEmailExistMisc instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckIfEmailExistMisc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckIfEmailExistMisc input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsDisposable == input.IsDisposable ||
                    (this.IsDisposable != null &&
                    this.IsDisposable.Equals(input.IsDisposable))
                ) && 
                (
                    this.IsRoleAccount == input.IsRoleAccount ||
                    (this.IsRoleAccount != null &&
                    this.IsRoleAccount.Equals(input.IsRoleAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsDisposable != null)
                    hashCode = hashCode * 59 + this.IsDisposable.GetHashCode();
                if (this.IsRoleAccount != null)
                    hashCode = hashCode * 59 + this.IsRoleAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

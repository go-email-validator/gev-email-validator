/* 
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CheckIfEmailExistSMTP
    /// </summary>
    [DataContract]
    public partial class CheckIfEmailExistSMTP :  IEquatable<CheckIfEmailExistSMTP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckIfEmailExistSMTP" /> class.
        /// </summary>
        /// <param name="canConnectSmtp">canConnectSmtp.</param>
        /// <param name="hasFullInbox">hasFullInbox.</param>
        /// <param name="isCatchAll">isCatchAll.</param>
        /// <param name="isDeliverable">isDeliverable.</param>
        /// <param name="isDisabled">isDisabled.</param>
        public CheckIfEmailExistSMTP(bool canConnectSmtp = default(bool), bool hasFullInbox = default(bool), bool isCatchAll = default(bool), bool isDeliverable = default(bool), bool isDisabled = default(bool))
        {
            this.CanConnectSmtp = canConnectSmtp;
            this.HasFullInbox = hasFullInbox;
            this.IsCatchAll = isCatchAll;
            this.IsDeliverable = isDeliverable;
            this.IsDisabled = isDisabled;
        }
        
        /// <summary>
        /// Gets or Sets CanConnectSmtp
        /// </summary>
        [DataMember(Name="can_connect_smtp", EmitDefaultValue=false)]
        public bool CanConnectSmtp { get; set; }

        /// <summary>
        /// Gets or Sets HasFullInbox
        /// </summary>
        [DataMember(Name="has_full_inbox", EmitDefaultValue=false)]
        public bool HasFullInbox { get; set; }

        /// <summary>
        /// Gets or Sets IsCatchAll
        /// </summary>
        [DataMember(Name="is_catch_all", EmitDefaultValue=false)]
        public bool IsCatchAll { get; set; }

        /// <summary>
        /// Gets or Sets IsDeliverable
        /// </summary>
        [DataMember(Name="is_deliverable", EmitDefaultValue=false)]
        public bool IsDeliverable { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="is_disabled", EmitDefaultValue=false)]
        public bool IsDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckIfEmailExistSMTP {\n");
            sb.Append("  CanConnectSmtp: ").Append(CanConnectSmtp).Append("\n");
            sb.Append("  HasFullInbox: ").Append(HasFullInbox).Append("\n");
            sb.Append("  IsCatchAll: ").Append(IsCatchAll).Append("\n");
            sb.Append("  IsDeliverable: ").Append(IsDeliverable).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckIfEmailExistSMTP);
        }

        /// <summary>
        /// Returns true if CheckIfEmailExistSMTP instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckIfEmailExistSMTP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckIfEmailExistSMTP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanConnectSmtp == input.CanConnectSmtp ||
                    (this.CanConnectSmtp != null &&
                    this.CanConnectSmtp.Equals(input.CanConnectSmtp))
                ) && 
                (
                    this.HasFullInbox == input.HasFullInbox ||
                    (this.HasFullInbox != null &&
                    this.HasFullInbox.Equals(input.HasFullInbox))
                ) && 
                (
                    this.IsCatchAll == input.IsCatchAll ||
                    (this.IsCatchAll != null &&
                    this.IsCatchAll.Equals(input.IsCatchAll))
                ) && 
                (
                    this.IsDeliverable == input.IsDeliverable ||
                    (this.IsDeliverable != null &&
                    this.IsDeliverable.Equals(input.IsDeliverable))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanConnectSmtp != null)
                    hashCode = hashCode * 59 + this.CanConnectSmtp.GetHashCode();
                if (this.HasFullInbox != null)
                    hashCode = hashCode * 59 + this.HasFullInbox.GetHashCode();
                if (this.IsCatchAll != null)
                    hashCode = hashCode * 59 + this.IsCatchAll.GetHashCode();
                if (this.IsDeliverable != null)
                    hashCode = hashCode * 59 + this.IsDeliverable.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

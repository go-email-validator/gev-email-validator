/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CheckIfEmailExistResult struct for CheckIfEmailExistResult
type CheckIfEmailExistResult struct {
	Input *string `json:"input,omitempty"`
	IsReachable *string `json:"is_reachable,omitempty"`
	Misc *CheckIfEmailExistMisc `json:"misc,omitempty"`
	Mx *CheckIfEmailExistMX `json:"mx,omitempty"`
	Smtp *CheckIfEmailExistSMTP `json:"smtp,omitempty"`
	Syntax *CheckIfEmailExistSyntax `json:"syntax,omitempty"`
	Error *string `json:"error,omitempty"`
}

// NewCheckIfEmailExistResult instantiates a new CheckIfEmailExistResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckIfEmailExistResult() *CheckIfEmailExistResult {
	this := CheckIfEmailExistResult{}
	return &this
}

// NewCheckIfEmailExistResultWithDefaults instantiates a new CheckIfEmailExistResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckIfEmailExistResultWithDefaults() *CheckIfEmailExistResult {
	this := CheckIfEmailExistResult{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetInput() string {
	if o == nil || o.Input == nil {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetInputOk() (*string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *CheckIfEmailExistResult) SetInput(v string) {
	o.Input = &v
}

// GetIsReachable returns the IsReachable field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetIsReachable() string {
	if o == nil || o.IsReachable == nil {
		var ret string
		return ret
	}
	return *o.IsReachable
}

// GetIsReachableOk returns a tuple with the IsReachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetIsReachableOk() (*string, bool) {
	if o == nil || o.IsReachable == nil {
		return nil, false
	}
	return o.IsReachable, true
}

// HasIsReachable returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasIsReachable() bool {
	if o != nil && o.IsReachable != nil {
		return true
	}

	return false
}

// SetIsReachable gets a reference to the given string and assigns it to the IsReachable field.
func (o *CheckIfEmailExistResult) SetIsReachable(v string) {
	o.IsReachable = &v
}

// GetMisc returns the Misc field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetMisc() CheckIfEmailExistMisc {
	if o == nil || o.Misc == nil {
		var ret CheckIfEmailExistMisc
		return ret
	}
	return *o.Misc
}

// GetMiscOk returns a tuple with the Misc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetMiscOk() (*CheckIfEmailExistMisc, bool) {
	if o == nil || o.Misc == nil {
		return nil, false
	}
	return o.Misc, true
}

// HasMisc returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasMisc() bool {
	if o != nil && o.Misc != nil {
		return true
	}

	return false
}

// SetMisc gets a reference to the given CheckIfEmailExistMisc and assigns it to the Misc field.
func (o *CheckIfEmailExistResult) SetMisc(v CheckIfEmailExistMisc) {
	o.Misc = &v
}

// GetMx returns the Mx field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetMx() CheckIfEmailExistMX {
	if o == nil || o.Mx == nil {
		var ret CheckIfEmailExistMX
		return ret
	}
	return *o.Mx
}

// GetMxOk returns a tuple with the Mx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetMxOk() (*CheckIfEmailExistMX, bool) {
	if o == nil || o.Mx == nil {
		return nil, false
	}
	return o.Mx, true
}

// HasMx returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasMx() bool {
	if o != nil && o.Mx != nil {
		return true
	}

	return false
}

// SetMx gets a reference to the given CheckIfEmailExistMX and assigns it to the Mx field.
func (o *CheckIfEmailExistResult) SetMx(v CheckIfEmailExistMX) {
	o.Mx = &v
}

// GetSmtp returns the Smtp field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetSmtp() CheckIfEmailExistSMTP {
	if o == nil || o.Smtp == nil {
		var ret CheckIfEmailExistSMTP
		return ret
	}
	return *o.Smtp
}

// GetSmtpOk returns a tuple with the Smtp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetSmtpOk() (*CheckIfEmailExistSMTP, bool) {
	if o == nil || o.Smtp == nil {
		return nil, false
	}
	return o.Smtp, true
}

// HasSmtp returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasSmtp() bool {
	if o != nil && o.Smtp != nil {
		return true
	}

	return false
}

// SetSmtp gets a reference to the given CheckIfEmailExistSMTP and assigns it to the Smtp field.
func (o *CheckIfEmailExistResult) SetSmtp(v CheckIfEmailExistSMTP) {
	o.Smtp = &v
}

// GetSyntax returns the Syntax field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetSyntax() CheckIfEmailExistSyntax {
	if o == nil || o.Syntax == nil {
		var ret CheckIfEmailExistSyntax
		return ret
	}
	return *o.Syntax
}

// GetSyntaxOk returns a tuple with the Syntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetSyntaxOk() (*CheckIfEmailExistSyntax, bool) {
	if o == nil || o.Syntax == nil {
		return nil, false
	}
	return o.Syntax, true
}

// HasSyntax returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasSyntax() bool {
	if o != nil && o.Syntax != nil {
		return true
	}

	return false
}

// SetSyntax gets a reference to the given CheckIfEmailExistSyntax and assigns it to the Syntax field.
func (o *CheckIfEmailExistResult) SetSyntax(v CheckIfEmailExistSyntax) {
	o.Syntax = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CheckIfEmailExistResult) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistResult) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CheckIfEmailExistResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *CheckIfEmailExistResult) SetError(v string) {
	o.Error = &v
}

func (o CheckIfEmailExistResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.IsReachable != nil {
		toSerialize["is_reachable"] = o.IsReachable
	}
	if o.Misc != nil {
		toSerialize["misc"] = o.Misc
	}
	if o.Mx != nil {
		toSerialize["mx"] = o.Mx
	}
	if o.Smtp != nil {
		toSerialize["smtp"] = o.Smtp
	}
	if o.Syntax != nil {
		toSerialize["syntax"] = o.Syntax
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableCheckIfEmailExistResult struct {
	value *CheckIfEmailExistResult
	isSet bool
}

func (v NullableCheckIfEmailExistResult) Get() *CheckIfEmailExistResult {
	return v.value
}

func (v *NullableCheckIfEmailExistResult) Set(val *CheckIfEmailExistResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckIfEmailExistResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckIfEmailExistResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckIfEmailExistResult(val *CheckIfEmailExistResult) *NullableCheckIfEmailExistResult {
	return &NullableCheckIfEmailExistResult{value: val, isSet: true}
}

func (v NullableCheckIfEmailExistResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckIfEmailExistResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



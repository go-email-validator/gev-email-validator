/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CheckIfEmailExistSMTP struct for CheckIfEmailExistSMTP
type CheckIfEmailExistSMTP struct {
	CanConnectSmtp *bool `json:"can_connect_smtp,omitempty"`
	HasFullInbox *bool `json:"has_full_inbox,omitempty"`
	IsCatchAll *bool `json:"is_catch_all,omitempty"`
	IsDeliverable *bool `json:"is_deliverable,omitempty"`
	IsDisabled *bool `json:"is_disabled,omitempty"`
}

// NewCheckIfEmailExistSMTP instantiates a new CheckIfEmailExistSMTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckIfEmailExistSMTP() *CheckIfEmailExistSMTP {
	this := CheckIfEmailExistSMTP{}
	return &this
}

// NewCheckIfEmailExistSMTPWithDefaults instantiates a new CheckIfEmailExistSMTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckIfEmailExistSMTPWithDefaults() *CheckIfEmailExistSMTP {
	this := CheckIfEmailExistSMTP{}
	return &this
}

// GetCanConnectSmtp returns the CanConnectSmtp field value if set, zero value otherwise.
func (o *CheckIfEmailExistSMTP) GetCanConnectSmtp() bool {
	if o == nil || o.CanConnectSmtp == nil {
		var ret bool
		return ret
	}
	return *o.CanConnectSmtp
}

// GetCanConnectSmtpOk returns a tuple with the CanConnectSmtp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSMTP) GetCanConnectSmtpOk() (*bool, bool) {
	if o == nil || o.CanConnectSmtp == nil {
		return nil, false
	}
	return o.CanConnectSmtp, true
}

// HasCanConnectSmtp returns a boolean if a field has been set.
func (o *CheckIfEmailExistSMTP) HasCanConnectSmtp() bool {
	if o != nil && o.CanConnectSmtp != nil {
		return true
	}

	return false
}

// SetCanConnectSmtp gets a reference to the given bool and assigns it to the CanConnectSmtp field.
func (o *CheckIfEmailExistSMTP) SetCanConnectSmtp(v bool) {
	o.CanConnectSmtp = &v
}

// GetHasFullInbox returns the HasFullInbox field value if set, zero value otherwise.
func (o *CheckIfEmailExistSMTP) GetHasFullInbox() bool {
	if o == nil || o.HasFullInbox == nil {
		var ret bool
		return ret
	}
	return *o.HasFullInbox
}

// GetHasFullInboxOk returns a tuple with the HasFullInbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSMTP) GetHasFullInboxOk() (*bool, bool) {
	if o == nil || o.HasFullInbox == nil {
		return nil, false
	}
	return o.HasFullInbox, true
}

// HasHasFullInbox returns a boolean if a field has been set.
func (o *CheckIfEmailExistSMTP) HasHasFullInbox() bool {
	if o != nil && o.HasFullInbox != nil {
		return true
	}

	return false
}

// SetHasFullInbox gets a reference to the given bool and assigns it to the HasFullInbox field.
func (o *CheckIfEmailExistSMTP) SetHasFullInbox(v bool) {
	o.HasFullInbox = &v
}

// GetIsCatchAll returns the IsCatchAll field value if set, zero value otherwise.
func (o *CheckIfEmailExistSMTP) GetIsCatchAll() bool {
	if o == nil || o.IsCatchAll == nil {
		var ret bool
		return ret
	}
	return *o.IsCatchAll
}

// GetIsCatchAllOk returns a tuple with the IsCatchAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSMTP) GetIsCatchAllOk() (*bool, bool) {
	if o == nil || o.IsCatchAll == nil {
		return nil, false
	}
	return o.IsCatchAll, true
}

// HasIsCatchAll returns a boolean if a field has been set.
func (o *CheckIfEmailExistSMTP) HasIsCatchAll() bool {
	if o != nil && o.IsCatchAll != nil {
		return true
	}

	return false
}

// SetIsCatchAll gets a reference to the given bool and assigns it to the IsCatchAll field.
func (o *CheckIfEmailExistSMTP) SetIsCatchAll(v bool) {
	o.IsCatchAll = &v
}

// GetIsDeliverable returns the IsDeliverable field value if set, zero value otherwise.
func (o *CheckIfEmailExistSMTP) GetIsDeliverable() bool {
	if o == nil || o.IsDeliverable == nil {
		var ret bool
		return ret
	}
	return *o.IsDeliverable
}

// GetIsDeliverableOk returns a tuple with the IsDeliverable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSMTP) GetIsDeliverableOk() (*bool, bool) {
	if o == nil || o.IsDeliverable == nil {
		return nil, false
	}
	return o.IsDeliverable, true
}

// HasIsDeliverable returns a boolean if a field has been set.
func (o *CheckIfEmailExistSMTP) HasIsDeliverable() bool {
	if o != nil && o.IsDeliverable != nil {
		return true
	}

	return false
}

// SetIsDeliverable gets a reference to the given bool and assigns it to the IsDeliverable field.
func (o *CheckIfEmailExistSMTP) SetIsDeliverable(v bool) {
	o.IsDeliverable = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *CheckIfEmailExistSMTP) GetIsDisabled() bool {
	if o == nil || o.IsDisabled == nil {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSMTP) GetIsDisabledOk() (*bool, bool) {
	if o == nil || o.IsDisabled == nil {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *CheckIfEmailExistSMTP) HasIsDisabled() bool {
	if o != nil && o.IsDisabled != nil {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *CheckIfEmailExistSMTP) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

func (o CheckIfEmailExistSMTP) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanConnectSmtp != nil {
		toSerialize["can_connect_smtp"] = o.CanConnectSmtp
	}
	if o.HasFullInbox != nil {
		toSerialize["has_full_inbox"] = o.HasFullInbox
	}
	if o.IsCatchAll != nil {
		toSerialize["is_catch_all"] = o.IsCatchAll
	}
	if o.IsDeliverable != nil {
		toSerialize["is_deliverable"] = o.IsDeliverable
	}
	if o.IsDisabled != nil {
		toSerialize["is_disabled"] = o.IsDisabled
	}
	return json.Marshal(toSerialize)
}

type NullableCheckIfEmailExistSMTP struct {
	value *CheckIfEmailExistSMTP
	isSet bool
}

func (v NullableCheckIfEmailExistSMTP) Get() *CheckIfEmailExistSMTP {
	return v.value
}

func (v *NullableCheckIfEmailExistSMTP) Set(val *CheckIfEmailExistSMTP) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckIfEmailExistSMTP) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckIfEmailExistSMTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckIfEmailExistSMTP(val *CheckIfEmailExistSMTP) *NullableCheckIfEmailExistSMTP {
	return &NullableCheckIfEmailExistSMTP{value: val, isSet: true}
}

func (v NullableCheckIfEmailExistSMTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckIfEmailExistSMTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



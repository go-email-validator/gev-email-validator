/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UnexpectedError struct for UnexpectedError
type UnexpectedError struct {
	Code *int32 `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Details *map[string]map[string]interface{} `json:"details,omitempty"`
}

// NewUnexpectedError instantiates a new UnexpectedError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnexpectedError() *UnexpectedError {
	this := UnexpectedError{}
	return &this
}

// NewUnexpectedErrorWithDefaults instantiates a new UnexpectedError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnexpectedErrorWithDefaults() *UnexpectedError {
	this := UnexpectedError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UnexpectedError) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpectedError) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UnexpectedError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *UnexpectedError) SetCode(v int32) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UnexpectedError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpectedError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UnexpectedError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UnexpectedError) SetMessage(v string) {
	o.Message = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *UnexpectedError) GetDetails() map[string]map[string]interface{} {
	if o == nil || o.Details == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpectedError) GetDetailsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *UnexpectedError) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]map[string]interface{} and assigns it to the Details field.
func (o *UnexpectedError) SetDetails(v map[string]map[string]interface{}) {
	o.Details = &v
}

func (o UnexpectedError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableUnexpectedError struct {
	value *UnexpectedError
	isSet bool
}

func (v NullableUnexpectedError) Get() *UnexpectedError {
	return v.value
}

func (v *NullableUnexpectedError) Set(val *UnexpectedError) {
	v.value = val
	v.isSet = true
}

func (v NullableUnexpectedError) IsSet() bool {
	return v.isSet
}

func (v *NullableUnexpectedError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnexpectedError(val *UnexpectedError) *NullableUnexpectedError {
	return &NullableUnexpectedError{value: val, isSet: true}
}

func (v NullableUnexpectedError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnexpectedError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



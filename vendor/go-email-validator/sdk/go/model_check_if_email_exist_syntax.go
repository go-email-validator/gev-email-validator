/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CheckIfEmailExistSyntax struct for CheckIfEmailExistSyntax
type CheckIfEmailExistSyntax struct {
	Address       NullableString `json:"address,omitempty"`
	Domain        *string        `json:"domain,omitempty"`
	IsValidSyntax *bool          `json:"is_valid_syntax,omitempty"`
	Username      *string        `json:"username,omitempty"`
}

// NewCheckIfEmailExistSyntax instantiates a new CheckIfEmailExistSyntax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckIfEmailExistSyntax() *CheckIfEmailExistSyntax {
	this := CheckIfEmailExistSyntax{}
	return &this
}

// NewCheckIfEmailExistSyntaxWithDefaults instantiates a new CheckIfEmailExistSyntax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckIfEmailExistSyntaxWithDefaults() *CheckIfEmailExistSyntax {
	this := CheckIfEmailExistSyntax{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckIfEmailExistSyntax) GetAddress() string {
	if o == nil || o.Address.Get() == nil {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckIfEmailExistSyntax) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *CheckIfEmailExistSyntax) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *CheckIfEmailExistSyntax) SetAddress(v string) {
	o.Address.Set(&v)
}

// SetAddressNil sets the value for Address to be an explicit nil
func (o *CheckIfEmailExistSyntax) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *CheckIfEmailExistSyntax) UnsetAddress() {
	o.Address.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *CheckIfEmailExistSyntax) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSyntax) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *CheckIfEmailExistSyntax) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *CheckIfEmailExistSyntax) SetDomain(v string) {
	o.Domain = &v
}

// GetIsValidSyntax returns the IsValidSyntax field value if set, zero value otherwise.
func (o *CheckIfEmailExistSyntax) GetIsValidSyntax() bool {
	if o == nil || o.IsValidSyntax == nil {
		var ret bool
		return ret
	}
	return *o.IsValidSyntax
}

// GetIsValidSyntaxOk returns a tuple with the IsValidSyntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSyntax) GetIsValidSyntaxOk() (*bool, bool) {
	if o == nil || o.IsValidSyntax == nil {
		return nil, false
	}
	return o.IsValidSyntax, true
}

// HasIsValidSyntax returns a boolean if a field has been set.
func (o *CheckIfEmailExistSyntax) HasIsValidSyntax() bool {
	if o != nil && o.IsValidSyntax != nil {
		return true
	}

	return false
}

// SetIsValidSyntax gets a reference to the given bool and assigns it to the IsValidSyntax field.
func (o *CheckIfEmailExistSyntax) SetIsValidSyntax(v bool) {
	o.IsValidSyntax = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *CheckIfEmailExistSyntax) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistSyntax) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CheckIfEmailExistSyntax) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *CheckIfEmailExistSyntax) SetUsername(v string) {
	o.Username = &v
}

func (o CheckIfEmailExistSyntax) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.IsValidSyntax != nil {
		toSerialize["is_valid_syntax"] = o.IsValidSyntax
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableCheckIfEmailExistSyntax struct {
	value *CheckIfEmailExistSyntax
	isSet bool
}

func (v NullableCheckIfEmailExistSyntax) Get() *CheckIfEmailExistSyntax {
	return v.value
}

func (v *NullableCheckIfEmailExistSyntax) Set(val *CheckIfEmailExistSyntax) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckIfEmailExistSyntax) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckIfEmailExistSyntax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckIfEmailExistSyntax(val *CheckIfEmailExistSyntax) *NullableCheckIfEmailExistSyntax {
	return &NullableCheckIfEmailExistSyntax{value: val, isSet: true}
}

func (v NullableCheckIfEmailExistSyntax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckIfEmailExistSyntax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

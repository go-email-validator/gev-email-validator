/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ResultType * CHECK_IF_EMAIL_EXIST, CIEE - [check-if-email-exists format](https://github.com/amaurymartiny/check-if-email-exists#%EF%B8%8F-json-output). * MAILBOXVALIDATOR, MAIL_BOX_VALIDATOR, MBV - [mailboxvalidator.com format](https://www.mailboxvalidator.com/api-single-validation). * PROMPT_EMAIL_VERIFICATION_API, PEVA - [Email Verification api format](https://promptapi.com/marketplace/description/email_verification-api) from [promptapi](https://promptapi.com). 
type ResultType string

// List of ResultType
const (
	CHECK_IF_EMAIL_EXIST ResultType = "CHECK_IF_EMAIL_EXIST"
	CIEE ResultType = "CIEE"
	MAILBOXVALIDATOR ResultType = "MAILBOXVALIDATOR"
	MAIL_BOX_VALIDATOR ResultType = "MAIL_BOX_VALIDATOR"
	MBV ResultType = "MBV"
	PROMPT_EMAIL_VERIFICATION_API ResultType = "PROMPT_EMAIL_VERIFICATION_API"
	PEVA ResultType = "PEVA"
)

func (v *ResultType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResultType(value)
	for _, existing := range []ResultType{ "CHECK_IF_EMAIL_EXIST", "CIEE", "MAILBOXVALIDATOR", "MAIL_BOX_VALIDATOR", "MBV", "PROMPT_EMAIL_VERIFICATION_API", "PEVA",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResultType", value)
}

// Ptr returns reference to ResultType value
func (v ResultType) Ptr() *ResultType {
	return &v
}

type NullableResultType struct {
	value *ResultType
	isSet bool
}

func (v NullableResultType) Get() *ResultType {
	return v.value
}

func (v *NullableResultType) Set(val *ResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultType(val *ResultType) *NullableResultType {
	return &NullableResultType{value: val, isSet: true}
}

func (v NullableResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


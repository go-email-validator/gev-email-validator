/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CheckIfEmailExistMX struct for CheckIfEmailExistMX
type CheckIfEmailExistMX struct {
	AcceptsMail *bool `json:"accepts_mail,omitempty"`
	Records *[]string `json:"records,omitempty"`
}

// NewCheckIfEmailExistMX instantiates a new CheckIfEmailExistMX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckIfEmailExistMX() *CheckIfEmailExistMX {
	this := CheckIfEmailExistMX{}
	return &this
}

// NewCheckIfEmailExistMXWithDefaults instantiates a new CheckIfEmailExistMX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckIfEmailExistMXWithDefaults() *CheckIfEmailExistMX {
	this := CheckIfEmailExistMX{}
	return &this
}

// GetAcceptsMail returns the AcceptsMail field value if set, zero value otherwise.
func (o *CheckIfEmailExistMX) GetAcceptsMail() bool {
	if o == nil || o.AcceptsMail == nil {
		var ret bool
		return ret
	}
	return *o.AcceptsMail
}

// GetAcceptsMailOk returns a tuple with the AcceptsMail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistMX) GetAcceptsMailOk() (*bool, bool) {
	if o == nil || o.AcceptsMail == nil {
		return nil, false
	}
	return o.AcceptsMail, true
}

// HasAcceptsMail returns a boolean if a field has been set.
func (o *CheckIfEmailExistMX) HasAcceptsMail() bool {
	if o != nil && o.AcceptsMail != nil {
		return true
	}

	return false
}

// SetAcceptsMail gets a reference to the given bool and assigns it to the AcceptsMail field.
func (o *CheckIfEmailExistMX) SetAcceptsMail(v bool) {
	o.AcceptsMail = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *CheckIfEmailExistMX) GetRecords() []string {
	if o == nil || o.Records == nil {
		var ret []string
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistMX) GetRecordsOk() (*[]string, bool) {
	if o == nil || o.Records == nil {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *CheckIfEmailExistMX) HasRecords() bool {
	if o != nil && o.Records != nil {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []string and assigns it to the Records field.
func (o *CheckIfEmailExistMX) SetRecords(v []string) {
	o.Records = &v
}

func (o CheckIfEmailExistMX) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcceptsMail != nil {
		toSerialize["accepts_mail"] = o.AcceptsMail
	}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableCheckIfEmailExistMX struct {
	value *CheckIfEmailExistMX
	isSet bool
}

func (v NullableCheckIfEmailExistMX) Get() *CheckIfEmailExistMX {
	return v.value
}

func (v *NullableCheckIfEmailExistMX) Set(val *CheckIfEmailExistMX) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckIfEmailExistMX) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckIfEmailExistMX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckIfEmailExistMX(val *CheckIfEmailExistMX) *NullableCheckIfEmailExistMX {
	return &NullableCheckIfEmailExistMX{value: val, isSet: true}
}

func (v NullableCheckIfEmailExistMX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckIfEmailExistMX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



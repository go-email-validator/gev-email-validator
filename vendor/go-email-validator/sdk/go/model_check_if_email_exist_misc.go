/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CheckIfEmailExistMisc struct for CheckIfEmailExistMisc
type CheckIfEmailExistMisc struct {
	IsDisposable *bool `json:"is_disposable,omitempty"`
	IsRoleAccount *bool `json:"is_role_account,omitempty"`
}

// NewCheckIfEmailExistMisc instantiates a new CheckIfEmailExistMisc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckIfEmailExistMisc() *CheckIfEmailExistMisc {
	this := CheckIfEmailExistMisc{}
	return &this
}

// NewCheckIfEmailExistMiscWithDefaults instantiates a new CheckIfEmailExistMisc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckIfEmailExistMiscWithDefaults() *CheckIfEmailExistMisc {
	this := CheckIfEmailExistMisc{}
	return &this
}

// GetIsDisposable returns the IsDisposable field value if set, zero value otherwise.
func (o *CheckIfEmailExistMisc) GetIsDisposable() bool {
	if o == nil || o.IsDisposable == nil {
		var ret bool
		return ret
	}
	return *o.IsDisposable
}

// GetIsDisposableOk returns a tuple with the IsDisposable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistMisc) GetIsDisposableOk() (*bool, bool) {
	if o == nil || o.IsDisposable == nil {
		return nil, false
	}
	return o.IsDisposable, true
}

// HasIsDisposable returns a boolean if a field has been set.
func (o *CheckIfEmailExistMisc) HasIsDisposable() bool {
	if o != nil && o.IsDisposable != nil {
		return true
	}

	return false
}

// SetIsDisposable gets a reference to the given bool and assigns it to the IsDisposable field.
func (o *CheckIfEmailExistMisc) SetIsDisposable(v bool) {
	o.IsDisposable = &v
}

// GetIsRoleAccount returns the IsRoleAccount field value if set, zero value otherwise.
func (o *CheckIfEmailExistMisc) GetIsRoleAccount() bool {
	if o == nil || o.IsRoleAccount == nil {
		var ret bool
		return ret
	}
	return *o.IsRoleAccount
}

// GetIsRoleAccountOk returns a tuple with the IsRoleAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckIfEmailExistMisc) GetIsRoleAccountOk() (*bool, bool) {
	if o == nil || o.IsRoleAccount == nil {
		return nil, false
	}
	return o.IsRoleAccount, true
}

// HasIsRoleAccount returns a boolean if a field has been set.
func (o *CheckIfEmailExistMisc) HasIsRoleAccount() bool {
	if o != nil && o.IsRoleAccount != nil {
		return true
	}

	return false
}

// SetIsRoleAccount gets a reference to the given bool and assigns it to the IsRoleAccount field.
func (o *CheckIfEmailExistMisc) SetIsRoleAccount(v bool) {
	o.IsRoleAccount = &v
}

func (o CheckIfEmailExistMisc) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDisposable != nil {
		toSerialize["is_disposable"] = o.IsDisposable
	}
	if o.IsRoleAccount != nil {
		toSerialize["is_role_account"] = o.IsRoleAccount
	}
	return json.Marshal(toSerialize)
}

type NullableCheckIfEmailExistMisc struct {
	value *CheckIfEmailExistMisc
	isSet bool
}

func (v NullableCheckIfEmailExistMisc) Get() *CheckIfEmailExistMisc {
	return v.value
}

func (v *NullableCheckIfEmailExistMisc) Set(val *CheckIfEmailExistMisc) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckIfEmailExistMisc) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckIfEmailExistMisc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckIfEmailExistMisc(val *CheckIfEmailExistMisc) *NullableCheckIfEmailExistMisc {
	return &NullableCheckIfEmailExistMisc{value: val, isSet: true}
}

func (v NullableCheckIfEmailExistMisc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckIfEmailExistMisc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds. 
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmailRequest struct for EmailRequest
type EmailRequest struct {
	Email *string `json:"email,omitempty"`
	Smtp *EmailRequestSmtp `json:"smtp,omitempty"`
	ResultType *ResultType `json:"result_type,omitempty"`
}

// NewEmailRequest instantiates a new EmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRequest() *EmailRequest {
	this := EmailRequest{}
	var resultType ResultType = "CHECK_IF_EMAIL_EXIST"
	this.ResultType = &resultType
	return &this
}

// NewEmailRequestWithDefaults instantiates a new EmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRequestWithDefaults() *EmailRequest {
	this := EmailRequest{}
	var resultType ResultType = "CHECK_IF_EMAIL_EXIST"
	this.ResultType = &resultType
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailRequest) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailRequest) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmailRequest) SetEmail(v string) {
	o.Email = &v
}

// GetSmtp returns the Smtp field value if set, zero value otherwise.
func (o *EmailRequest) GetSmtp() EmailRequestSmtp {
	if o == nil || o.Smtp == nil {
		var ret EmailRequestSmtp
		return ret
	}
	return *o.Smtp
}

// GetSmtpOk returns a tuple with the Smtp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetSmtpOk() (*EmailRequestSmtp, bool) {
	if o == nil || o.Smtp == nil {
		return nil, false
	}
	return o.Smtp, true
}

// HasSmtp returns a boolean if a field has been set.
func (o *EmailRequest) HasSmtp() bool {
	if o != nil && o.Smtp != nil {
		return true
	}

	return false
}

// SetSmtp gets a reference to the given EmailRequestSmtp and assigns it to the Smtp field.
func (o *EmailRequest) SetSmtp(v EmailRequestSmtp) {
	o.Smtp = &v
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *EmailRequest) GetResultType() ResultType {
	if o == nil || o.ResultType == nil {
		var ret ResultType
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetResultTypeOk() (*ResultType, bool) {
	if o == nil || o.ResultType == nil {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *EmailRequest) HasResultType() bool {
	if o != nil && o.ResultType != nil {
		return true
	}

	return false
}

// SetResultType gets a reference to the given ResultType and assigns it to the ResultType field.
func (o *EmailRequest) SetResultType(v ResultType) {
	o.ResultType = &v
}

func (o EmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Smtp != nil {
		toSerialize["smtp"] = o.Smtp
	}
	if o.ResultType != nil {
		toSerialize["result_type"] = o.ResultType
	}
	return json.Marshal(toSerialize)
}

type NullableEmailRequest struct {
	value *EmailRequest
	isSet bool
}

func (v NullableEmailRequest) Get() *EmailRequest {
	return v.value
}

func (v *NullableEmailRequest) Set(val *EmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRequest(val *EmailRequest) *NullableEmailRequest {
	return &NullableEmailRequest{value: val, isSet: true}
}

func (v NullableEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



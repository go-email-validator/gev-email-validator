<?php
/**
 * EmailRequestSmtp
 *
 * PHP version 5.6
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmailRequestSmtp Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class EmailRequestSmtp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailRequest_smtp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email_from' => 'string',
        'hello_name' => 'string',
        'proxy' => 'string',
        'timeout_connection' => 'float',
        'timeout_response' => 'float',
        'port' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email_from' => 'email',
        'hello_name' => null,
        'proxy' => 'uri',
        'timeout_connection' => null,
        'timeout_response' => null,
        'port' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_from' => 'email_from',
        'hello_name' => 'hello_name',
        'proxy' => 'proxy',
        'timeout_connection' => 'timeout_connection',
        'timeout_response' => 'timeout_response',
        'port' => 'port'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_from' => 'setEmailFrom',
        'hello_name' => 'setHelloName',
        'proxy' => 'setProxy',
        'timeout_connection' => 'setTimeoutConnection',
        'timeout_response' => 'setTimeoutResponse',
        'port' => 'setPort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_from' => 'getEmailFrom',
        'hello_name' => 'getHelloName',
        'proxy' => 'getProxy',
        'timeout_connection' => 'getTimeoutConnection',
        'timeout_response' => 'getTimeoutResponse',
        'port' => 'getPort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_from'] = isset($data['email_from']) ? $data['email_from'] : 'user@example.org';
        $this->container['hello_name'] = isset($data['hello_name']) ? $data['hello_name'] : 'localhost';
        $this->container['proxy'] = isset($data['proxy']) ? $data['proxy'] : null;
        $this->container['timeout_connection'] = isset($data['timeout_connection']) ? $data['timeout_connection'] : 5.0;
        $this->container['timeout_response'] = isset($data['timeout_response']) ? $data['timeout_response'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : 25;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_from
     *
     * @return string|null
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string|null $email_from email_from
     *
     * @return self
     */
    public function setEmailFrom($email_from)
    {
        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets hello_name
     *
     * @return string|null
     */
    public function getHelloName()
    {
        return $this->container['hello_name'];
    }

    /**
     * Sets hello_name
     *
     * @param string|null $hello_name hello_name
     *
     * @return self
     */
    public function setHelloName($hello_name)
    {
        $this->container['hello_name'] = $hello_name;

        return $this;
    }

    /**
     * Gets proxy
     *
     * @return string|null
     */
    public function getProxy()
    {
        return $this->container['proxy'];
    }

    /**
     * Sets proxy
     *
     * @param string|null $proxy Versions - SOCKS4, SOCKS4A and SOCKS5. Format -  schema://username:password@host:port.
     *
     * @return self
     */
    public function setProxy($proxy)
    {
        $this->container['proxy'] = $proxy;

        return $this;
    }

    /**
     * Gets timeout_connection
     *
     * @return float|null
     */
    public function getTimeoutConnection()
    {
        return $this->container['timeout_connection'];
    }

    /**
     * Sets timeout_connection
     *
     * @param float|null $timeout_connection timeout creating smtp connection
     *
     * @return self
     */
    public function setTimeoutConnection($timeout_connection)
    {
        $this->container['timeout_connection'] = $timeout_connection;

        return $this;
    }

    /**
     * Gets timeout_response
     *
     * @return float|null
     */
    public function getTimeoutResponse()
    {
        return $this->container['timeout_response'];
    }

    /**
     * Sets timeout_response
     *
     * @param float|null $timeout_response timeout of communication with smtp server
     *
     * @return self
     */
    public function setTimeoutResponse($timeout_response)
    {
        $this->container['timeout_response'] = $timeout_response;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port smtp port remote server
     *
     * @return self
     */
    public function setPort($port)
    {
        $this->container['port'] = $port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



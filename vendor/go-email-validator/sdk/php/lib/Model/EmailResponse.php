<?php
/**
 * EmailResponse
 *
 * PHP version 5.6
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EmailResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class EmailResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'check_if_email_exist' => '\OpenAPI\Client\Model\CheckIfEmailExistResult',
        'mailboxvalidator' => '\OpenAPI\Client\Model\MailboxvalidatorResult',
        'prompt_email_verification_api' => '\OpenAPI\Client\Model\PromptEmailVerificationApiResult'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'check_if_email_exist' => null,
        'mailboxvalidator' => null,
        'prompt_email_verification_api' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'check_if_email_exist' => 'check_if_email_exist',
        'mailboxvalidator' => 'mailboxvalidator',
        'prompt_email_verification_api' => 'prompt_email_verification_api'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'check_if_email_exist' => 'setCheckIfEmailExist',
        'mailboxvalidator' => 'setMailboxvalidator',
        'prompt_email_verification_api' => 'setPromptEmailVerificationApi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'check_if_email_exist' => 'getCheckIfEmailExist',
        'mailboxvalidator' => 'getMailboxvalidator',
        'prompt_email_verification_api' => 'getPromptEmailVerificationApi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['check_if_email_exist'] = isset($data['check_if_email_exist']) ? $data['check_if_email_exist'] : null;
        $this->container['mailboxvalidator'] = isset($data['mailboxvalidator']) ? $data['mailboxvalidator'] : null;
        $this->container['prompt_email_verification_api'] = isset($data['prompt_email_verification_api']) ? $data['prompt_email_verification_api'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets check_if_email_exist
     *
     * @return \OpenAPI\Client\Model\CheckIfEmailExistResult|null
     */
    public function getCheckIfEmailExist()
    {
        return $this->container['check_if_email_exist'];
    }

    /**
     * Sets check_if_email_exist
     *
     * @param \OpenAPI\Client\Model\CheckIfEmailExistResult|null $check_if_email_exist check_if_email_exist
     *
     * @return self
     */
    public function setCheckIfEmailExist($check_if_email_exist)
    {
        $this->container['check_if_email_exist'] = $check_if_email_exist;

        return $this;
    }

    /**
     * Gets mailboxvalidator
     *
     * @return \OpenAPI\Client\Model\MailboxvalidatorResult|null
     */
    public function getMailboxvalidator()
    {
        return $this->container['mailboxvalidator'];
    }

    /**
     * Sets mailboxvalidator
     *
     * @param \OpenAPI\Client\Model\MailboxvalidatorResult|null $mailboxvalidator mailboxvalidator
     *
     * @return self
     */
    public function setMailboxvalidator($mailboxvalidator)
    {
        $this->container['mailboxvalidator'] = $mailboxvalidator;

        return $this;
    }

    /**
     * Gets prompt_email_verification_api
     *
     * @return \OpenAPI\Client\Model\PromptEmailVerificationApiResult|null
     */
    public function getPromptEmailVerificationApi()
    {
        return $this->container['prompt_email_verification_api'];
    }

    /**
     * Sets prompt_email_verification_api
     *
     * @param \OpenAPI\Client\Model\PromptEmailVerificationApiResult|null $prompt_email_verification_api prompt_email_verification_api
     *
     * @return self
     */
    public function setPromptEmailVerificationApi($prompt_email_verification_api)
    {
        $this->container['prompt_email_verification_api'] = $prompt_email_verification_api;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



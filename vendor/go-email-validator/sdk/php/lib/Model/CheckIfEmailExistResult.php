<?php
/**
 * CheckIfEmailExistResult
 *
 * PHP version 5.6
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Email Validator
 *
 * All timeouts are set in seconds with nanosecond precision. For example, 1.505402 is 1 second, 505 milliseconds and 402 microseconds.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CheckIfEmailExistResult Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CheckIfEmailExistResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckIfEmailExistResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input' => 'string',
        'is_reachable' => 'string',
        'misc' => '\OpenAPI\Client\Model\CheckIfEmailExistMisc',
        'mx' => '\OpenAPI\Client\Model\CheckIfEmailExistMX',
        'smtp' => '\OpenAPI\Client\Model\CheckIfEmailExistSMTP',
        'syntax' => '\OpenAPI\Client\Model\CheckIfEmailExistSyntax',
        'error' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input' => null,
        'is_reachable' => null,
        'misc' => null,
        'mx' => null,
        'smtp' => null,
        'syntax' => null,
        'error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
        'is_reachable' => 'is_reachable',
        'misc' => 'misc',
        'mx' => 'mx',
        'smtp' => 'smtp',
        'syntax' => 'syntax',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'is_reachable' => 'setIsReachable',
        'misc' => 'setMisc',
        'mx' => 'setMx',
        'smtp' => 'setSmtp',
        'syntax' => 'setSyntax',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'is_reachable' => 'getIsReachable',
        'misc' => 'getMisc',
        'mx' => 'getMx',
        'smtp' => 'getSmtp',
        'syntax' => 'getSyntax',
        'error' => 'getError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = isset($data['input']) ? $data['input'] : null;
        $this->container['is_reachable'] = isset($data['is_reachable']) ? $data['is_reachable'] : null;
        $this->container['misc'] = isset($data['misc']) ? $data['misc'] : null;
        $this->container['mx'] = isset($data['mx']) ? $data['mx'] : null;
        $this->container['smtp'] = isset($data['smtp']) ? $data['smtp'] : null;
        $this->container['syntax'] = isset($data['syntax']) ? $data['syntax'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return string|null
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string|null $input input
     *
     * @return self
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets is_reachable
     *
     * @return string|null
     */
    public function getIsReachable()
    {
        return $this->container['is_reachable'];
    }

    /**
     * Sets is_reachable
     *
     * @param string|null $is_reachable is_reachable
     *
     * @return self
     */
    public function setIsReachable($is_reachable)
    {
        $this->container['is_reachable'] = $is_reachable;

        return $this;
    }

    /**
     * Gets misc
     *
     * @return \OpenAPI\Client\Model\CheckIfEmailExistMisc|null
     */
    public function getMisc()
    {
        return $this->container['misc'];
    }

    /**
     * Sets misc
     *
     * @param \OpenAPI\Client\Model\CheckIfEmailExistMisc|null $misc misc
     *
     * @return self
     */
    public function setMisc($misc)
    {
        $this->container['misc'] = $misc;

        return $this;
    }

    /**
     * Gets mx
     *
     * @return \OpenAPI\Client\Model\CheckIfEmailExistMX|null
     */
    public function getMx()
    {
        return $this->container['mx'];
    }

    /**
     * Sets mx
     *
     * @param \OpenAPI\Client\Model\CheckIfEmailExistMX|null $mx mx
     *
     * @return self
     */
    public function setMx($mx)
    {
        $this->container['mx'] = $mx;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return \OpenAPI\Client\Model\CheckIfEmailExistSMTP|null
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param \OpenAPI\Client\Model\CheckIfEmailExistSMTP|null $smtp smtp
     *
     * @return self
     */
    public function setSmtp($smtp)
    {
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets syntax
     *
     * @return \OpenAPI\Client\Model\CheckIfEmailExistSyntax|null
     */
    public function getSyntax()
    {
        return $this->container['syntax'];
    }

    /**
     * Sets syntax
     *
     * @param \OpenAPI\Client\Model\CheckIfEmailExistSyntax|null $syntax syntax
     *
     * @return self
     */
    public function setSyntax($syntax)
    {
        $this->container['syntax'] = $syntax;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


